// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"

	"github.com/lib/pq"
)

const activeUserByInvitationToken = `-- name: ActiveUserByInvitationToken :exec
UPDATE users u
SET is_active = TRUE
FROM user_invitations i
WHERE i.user_id = u.id
  AND i.token = $1
  AND i.expiry > $2
`

type ActiveUserByInvitationTokenParams struct {
	Token  []byte
	Expiry time.Time
}

func (q *Queries) ActiveUserByInvitationToken(ctx context.Context, arg ActiveUserByInvitationTokenParams) error {
	_, err := q.db.ExecContext(ctx, activeUserByInvitationToken, arg.Token, arg.Expiry)
	return err
}

const createComment = `-- name: CreateComment :one
INSERT INTO comments (post_id, user_id, content)
VALUES ($1, $2, $3)
RETURNING id, created_at
`

type CreateCommentParams struct {
	PostID  int64
	UserID  int64
	Content sql.NullString
}

type CreateCommentRow struct {
	ID        int64
	CreatedAt time.Time
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (CreateCommentRow, error) {
	row := q.db.QueryRowContext(ctx, createComment, arg.PostID, arg.UserID, arg.Content)
	var i CreateCommentRow
	err := row.Scan(&i.ID, &i.CreatedAt)
	return i, err
}

const createFollow = `-- name: CreateFollow :exec
INSERT INTO followers (user_id, follower_id)
VALUES ($1, $2)
`

type CreateFollowParams struct {
	UserID     int64
	FollowerID int64
}

func (q *Queries) CreateFollow(ctx context.Context, arg CreateFollowParams) error {
	_, err := q.db.ExecContext(ctx, createFollow, arg.UserID, arg.FollowerID)
	return err
}

const createPost = `-- name: CreatePost :one
INSERT INTO posts (content, title, user_id, tags)
VALUES ($1, $2, $3, $4)
RETURNING id, created_at, updated_at
`

type CreatePostParams struct {
	Content string
	Title   string
	UserID  int64
	Tags    []string
}

type CreatePostRow struct {
	ID        int64
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (CreatePostRow, error) {
	row := q.db.QueryRowContext(ctx, createPost,
		arg.Content,
		arg.Title,
		arg.UserID,
		pq.Array(arg.Tags),
	)
	var i CreatePostRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, email, password, role_id)
VALUES ($1, $2, $3, $4)
RETURNING id, created_at
`

type CreateUserParams struct {
	Username string
	Email    string
	Password []byte
	RoleID   int32
}

type CreateUserRow struct {
	ID        int64
	CreatedAt time.Time
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.Email,
		arg.Password,
		arg.RoleID,
	)
	var i CreateUserRow
	err := row.Scan(&i.ID, &i.CreatedAt)
	return i, err
}

const createUserInvitation = `-- name: CreateUserInvitation :exec
INSERT INTO user_invitations (token, user_id, expiry)
VALUES ($1, $2, $3)
`

type CreateUserInvitationParams struct {
	Token  []byte
	UserID int64
	Expiry time.Time
}

func (q *Queries) CreateUserInvitation(ctx context.Context, arg CreateUserInvitationParams) error {
	_, err := q.db.ExecContext(ctx, createUserInvitation, arg.Token, arg.UserID, arg.Expiry)
	return err
}

const deleteFollow = `-- name: DeleteFollow :execrows
DELETE
FROM followers
WHERE user_id = $1
  AND follower_id = $2
`

type DeleteFollowParams struct {
	UserID     int64
	FollowerID int64
}

func (q *Queries) DeleteFollow(ctx context.Context, arg DeleteFollowParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteFollow, arg.UserID, arg.FollowerID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const deletePostByID = `-- name: DeletePostByID :execrows
DELETE
FROM posts
WHERE id = $1
`

func (q *Queries) DeletePostByID(ctx context.Context, id int64) (int64, error) {
	result, err := q.db.ExecContext(ctx, deletePostByID, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const deleteUserByID = `-- name: DeleteUserByID :exec
DELETE
FROM users
WHERE id = $1
`

func (q *Queries) DeleteUserByID(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUserByID, id)
	return err
}

const deleteUserInvitationByToken = `-- name: DeleteUserInvitationByToken :exec
DELETE
FROM user_invitations
WHERE token = $1
`

func (q *Queries) DeleteUserInvitationByToken(ctx context.Context, token []byte) error {
	_, err := q.db.ExecContext(ctx, deleteUserInvitationByToken, token)
	return err
}

const deleteUserInvitationByUserID = `-- name: DeleteUserInvitationByUserID :exec
DELETE
FROM user_invitations
WHERE user_id = $1
`

func (q *Queries) DeleteUserInvitationByUserID(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, deleteUserInvitationByUserID, userID)
	return err
}

const getAllCommentsByPostID = `-- name: GetAllCommentsByPostID :many
SELECT c.id,
       c.post_id,
       c.user_id,
       c.content,
       c.created_at,
       u.username,
       u.id
FROM comments c
         JOIN users u ON u.id = c.user_id
WHERE c.post_id = $1
ORDER BY c.created_at DESC
`

type GetAllCommentsByPostIDRow struct {
	ID        int64
	PostID    int64
	UserID    int64
	Content   sql.NullString
	CreatedAt time.Time
	Username  string
	ID_2      int64
}

func (q *Queries) GetAllCommentsByPostID(ctx context.Context, postID int64) ([]GetAllCommentsByPostIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllCommentsByPostID, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllCommentsByPostIDRow
	for rows.Next() {
		var i GetAllCommentsByPostIDRow
		if err := rows.Scan(
			&i.ID,
			&i.PostID,
			&i.UserID,
			&i.Content,
			&i.CreatedAt,
			&i.Username,
			&i.ID_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostByID = `-- name: GetPostByID :one
SELECT id,
       content,
       title,
       user_id,
       created_at,
       updated_at,
       tags,
       version
FROM posts
WHERE id = $1
`

type GetPostByIDRow struct {
	ID        int64
	Content   string
	Title     string
	UserID    int64
	CreatedAt time.Time
	UpdatedAt time.Time
	Tags      []string
	Version   sql.NullInt32
}

func (q *Queries) GetPostByID(ctx context.Context, id int64) (GetPostByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getPostByID, id)
	var i GetPostByIDRow
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.Title,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		pq.Array(&i.Tags),
		&i.Version,
	)
	return i, err
}

const getRoleByName = `-- name: GetRoleByName :one
SELECT id, name, description, level
FROM roles
WHERE name = $1
`

type GetRoleByNameRow struct {
	ID          int64
	Name        string
	Description sql.NullString
	Level       int32
}

func (q *Queries) GetRoleByName(ctx context.Context, name string) (GetRoleByNameRow, error) {
	row := q.db.QueryRowContext(ctx, getRoleByName, name)
	var i GetRoleByNameRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Level,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password, username, created_at, is_active
FROM users
WHERE email = $1
`

type GetUserByEmailRow struct {
	ID        int64
	Email     string
	Password  []byte
	Username  string
	CreatedAt time.Time
	IsActive  bool
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Username,
		&i.CreatedAt,
		&i.IsActive,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT users.id,
       users.username,
       users.email,
       users.created_at,
       users.is_active,
       r.id          as role_id,
       r.name        as role_name,
       r.description as role_description,
       r.level       as role_level
FROM users
         JOIN roles r ON (users.role_id = r.id)
WHERE users.id = $1
`

type GetUserByIDRow struct {
	ID              int64
	Username        string
	Email           string
	CreatedAt       time.Time
	IsActive        bool
	RoleID          int64
	RoleName        string
	RoleDescription sql.NullString
	RoleLevel       int32
}

func (q *Queries) GetUserByID(ctx context.Context, id int64) (GetUserByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i GetUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
		&i.IsActive,
		&i.RoleID,
		&i.RoleName,
		&i.RoleDescription,
		&i.RoleLevel,
	)
	return i, err
}

const getUserFeed = `-- name: GetUserFeed :many
SELECT p.id,
       p.user_id,
       p.title,
       p.content,
       p.created_at,
       p.tags,
       COUNT(c.id) AS comments_count,
       u.username
FROM posts p
         LEFT JOIN comments c ON c.post_id = p.id
         LEFT JOIN users u ON p.user_id = u.id
         JOIN followers f ON f.follower_id = p.user_id
    OR p.user_id = $1
WHERE (f.user_id = $1 OR p.user_id = $1)
  AND ($4 = '' OR LOWER(p.title) LIKE LOWER('%' || $4 || '%') OR LOWER(p.content) LIKE LOWER('%' || $4 || '%'))
  AND (p.tags @> $5 OR $5 = '{}')
GROUP BY p.id, u.username
ORDER BY p.created_at DESC
LIMIT $2 OFFSET $3
`

type GetUserFeedParams struct {
	UserID  int64
	Limit   int32
	Offset  int32
	Column4 interface{}
	Tags    []string
}

type GetUserFeedRow struct {
	ID            int64
	UserID        int64
	Title         string
	Content       string
	CreatedAt     time.Time
	Tags          []string
	CommentsCount int64
	Username      sql.NullString
}

func (q *Queries) GetUserFeed(ctx context.Context, arg GetUserFeedParams) ([]GetUserFeedRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserFeed,
		arg.UserID,
		arg.Limit,
		arg.Offset,
		arg.Column4,
		pq.Array(arg.Tags),
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserFeedRow
	for rows.Next() {
		var i GetUserFeedRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Content,
			&i.CreatedAt,
			pq.Array(&i.Tags),
			&i.CommentsCount,
			&i.Username,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePost = `-- name: UpdatePost :one
UPDATE posts
SET content = $1,
    title   = $2,
    version = version + 1
WHERE id = $3
  AND version = $4
RETURNING version
`

type UpdatePostParams struct {
	Content string
	Title   string
	ID      int64
	Version sql.NullInt32
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) (sql.NullInt32, error) {
	row := q.db.QueryRowContext(ctx, updatePost,
		arg.Content,
		arg.Title,
		arg.ID,
		arg.Version,
	)
	var version sql.NullInt32
	err := row.Scan(&version)
	return version, err
}
