// Code generated by mockery v2.53.3. DO NOT EDIT.

package domain

import (
	context "context"
	sql "database/sql"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockUsersRepository is an autogenerated mock type for the UsersRepository type
type MockUsersRepository struct {
	mock.Mock
}

type MockUsersRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUsersRepository) EXPECT() *MockUsersRepository_Expecter {
	return &MockUsersRepository_Expecter{mock: &_m.Mock}
}

// Activate provides a mock function with given fields: ctx, token
func (_m *MockUsersRepository) Activate(ctx context.Context, token string) error {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for Activate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUsersRepository_Activate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Activate'
type MockUsersRepository_Activate_Call struct {
	*mock.Call
}

// Activate is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *MockUsersRepository_Expecter) Activate(ctx interface{}, token interface{}) *MockUsersRepository_Activate_Call {
	return &MockUsersRepository_Activate_Call{Call: _e.mock.On("Activate", ctx, token)}
}

func (_c *MockUsersRepository_Activate_Call) Run(run func(ctx context.Context, token string)) *MockUsersRepository_Activate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUsersRepository_Activate_Call) Return(_a0 error) *MockUsersRepository_Activate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUsersRepository_Activate_Call) RunAndReturn(run func(context.Context, string) error) *MockUsersRepository_Activate_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, tx, user
func (_m *MockUsersRepository) Create(ctx context.Context, tx *sql.Tx, user *User) error {
	ret := _m.Called(ctx, tx, user)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, *User) error); ok {
		r0 = rf(ctx, tx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUsersRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockUsersRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - tx *sql.Tx
//   - user *User
func (_e *MockUsersRepository_Expecter) Create(ctx interface{}, tx interface{}, user interface{}) *MockUsersRepository_Create_Call {
	return &MockUsersRepository_Create_Call{Call: _e.mock.On("Create", ctx, tx, user)}
}

func (_c *MockUsersRepository_Create_Call) Run(run func(ctx context.Context, tx *sql.Tx, user *User)) *MockUsersRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sql.Tx), args[2].(*User))
	})
	return _c
}

func (_c *MockUsersRepository_Create_Call) Return(_a0 error) *MockUsersRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUsersRepository_Create_Call) RunAndReturn(run func(context.Context, *sql.Tx, *User) error) *MockUsersRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAndInvite provides a mock function with given fields: ctx, user, token, expiration
func (_m *MockUsersRepository) CreateAndInvite(ctx context.Context, user *User, token string, expiration time.Duration) error {
	ret := _m.Called(ctx, user, token, expiration)

	if len(ret) == 0 {
		panic("no return value specified for CreateAndInvite")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *User, string, time.Duration) error); ok {
		r0 = rf(ctx, user, token, expiration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUsersRepository_CreateAndInvite_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAndInvite'
type MockUsersRepository_CreateAndInvite_Call struct {
	*mock.Call
}

// CreateAndInvite is a helper method to define mock.On call
//   - ctx context.Context
//   - user *User
//   - token string
//   - expiration time.Duration
func (_e *MockUsersRepository_Expecter) CreateAndInvite(ctx interface{}, user interface{}, token interface{}, expiration interface{}) *MockUsersRepository_CreateAndInvite_Call {
	return &MockUsersRepository_CreateAndInvite_Call{Call: _e.mock.On("CreateAndInvite", ctx, user, token, expiration)}
}

func (_c *MockUsersRepository_CreateAndInvite_Call) Run(run func(ctx context.Context, user *User, token string, expiration time.Duration)) *MockUsersRepository_CreateAndInvite_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*User), args[2].(string), args[3].(time.Duration))
	})
	return _c
}

func (_c *MockUsersRepository_CreateAndInvite_Call) Return(_a0 error) *MockUsersRepository_CreateAndInvite_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUsersRepository_CreateAndInvite_Call) RunAndReturn(run func(context.Context, *User, string, time.Duration) error) *MockUsersRepository_CreateAndInvite_Call {
	_c.Call.Return(run)
	return _c
}

// GetByEmail provides a mock function with given fields: ctx, email
func (_m *MockUsersRepository) GetByEmail(ctx context.Context, email string) (*User, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetByEmail")
	}

	var r0 *User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *User); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUsersRepository_GetByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByEmail'
type MockUsersRepository_GetByEmail_Call struct {
	*mock.Call
}

// GetByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockUsersRepository_Expecter) GetByEmail(ctx interface{}, email interface{}) *MockUsersRepository_GetByEmail_Call {
	return &MockUsersRepository_GetByEmail_Call{Call: _e.mock.On("GetByEmail", ctx, email)}
}

func (_c *MockUsersRepository_GetByEmail_Call) Run(run func(ctx context.Context, email string)) *MockUsersRepository_GetByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUsersRepository_GetByEmail_Call) Return(_a0 *User, _a1 error) *MockUsersRepository_GetByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUsersRepository_GetByEmail_Call) RunAndReturn(run func(context.Context, string) (*User, error)) *MockUsersRepository_GetByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *MockUsersRepository) GetByID(ctx context.Context, id int64) (*User, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUsersRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockUsersRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockUsersRepository_Expecter) GetByID(ctx interface{}, id interface{}) *MockUsersRepository_GetByID_Call {
	return &MockUsersRepository_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockUsersRepository_GetByID_Call) Run(run func(ctx context.Context, id int64)) *MockUsersRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockUsersRepository_GetByID_Call) Return(_a0 *User, _a1 error) *MockUsersRepository_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUsersRepository_GetByID_Call) RunAndReturn(run func(context.Context, int64) (*User, error)) *MockUsersRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// RevertCreateAndInvite provides a mock function with given fields: ctx, id
func (_m *MockUsersRepository) RevertCreateAndInvite(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for RevertCreateAndInvite")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUsersRepository_RevertCreateAndInvite_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevertCreateAndInvite'
type MockUsersRepository_RevertCreateAndInvite_Call struct {
	*mock.Call
}

// RevertCreateAndInvite is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockUsersRepository_Expecter) RevertCreateAndInvite(ctx interface{}, id interface{}) *MockUsersRepository_RevertCreateAndInvite_Call {
	return &MockUsersRepository_RevertCreateAndInvite_Call{Call: _e.mock.On("RevertCreateAndInvite", ctx, id)}
}

func (_c *MockUsersRepository_RevertCreateAndInvite_Call) Run(run func(ctx context.Context, id int64)) *MockUsersRepository_RevertCreateAndInvite_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockUsersRepository_RevertCreateAndInvite_Call) Return(_a0 error) *MockUsersRepository_RevertCreateAndInvite_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUsersRepository_RevertCreateAndInvite_Call) RunAndReturn(run func(context.Context, int64) error) *MockUsersRepository_RevertCreateAndInvite_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUsersRepository creates a new instance of MockUsersRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUsersRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUsersRepository {
	mock := &MockUsersRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
