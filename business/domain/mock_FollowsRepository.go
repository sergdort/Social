// Code generated by mockery v2.53.3. DO NOT EDIT.

package domain

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockFollowsRepository is an autogenerated mock type for the FollowsRepository type
type MockFollowsRepository struct {
	mock.Mock
}

type MockFollowsRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFollowsRepository) EXPECT() *MockFollowsRepository_Expecter {
	return &MockFollowsRepository_Expecter{mock: &_m.Mock}
}

// Follow provides a mock function with given fields: ctx, userID, followerID
func (_m *MockFollowsRepository) Follow(ctx context.Context, userID int64, followerID int64) error {
	ret := _m.Called(ctx, userID, followerID)

	if len(ret) == 0 {
		panic("no return value specified for Follow")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(ctx, userID, followerID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFollowsRepository_Follow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Follow'
type MockFollowsRepository_Follow_Call struct {
	*mock.Call
}

// Follow is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
//   - followerID int64
func (_e *MockFollowsRepository_Expecter) Follow(ctx interface{}, userID interface{}, followerID interface{}) *MockFollowsRepository_Follow_Call {
	return &MockFollowsRepository_Follow_Call{Call: _e.mock.On("Follow", ctx, userID, followerID)}
}

func (_c *MockFollowsRepository_Follow_Call) Run(run func(ctx context.Context, userID int64, followerID int64)) *MockFollowsRepository_Follow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *MockFollowsRepository_Follow_Call) Return(_a0 error) *MockFollowsRepository_Follow_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFollowsRepository_Follow_Call) RunAndReturn(run func(context.Context, int64, int64) error) *MockFollowsRepository_Follow_Call {
	_c.Call.Return(run)
	return _c
}

// Unfollow provides a mock function with given fields: ctx, userID, followerID
func (_m *MockFollowsRepository) Unfollow(ctx context.Context, userID int64, followerID int64) error {
	ret := _m.Called(ctx, userID, followerID)

	if len(ret) == 0 {
		panic("no return value specified for Unfollow")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(ctx, userID, followerID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFollowsRepository_Unfollow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unfollow'
type MockFollowsRepository_Unfollow_Call struct {
	*mock.Call
}

// Unfollow is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
//   - followerID int64
func (_e *MockFollowsRepository_Expecter) Unfollow(ctx interface{}, userID interface{}, followerID interface{}) *MockFollowsRepository_Unfollow_Call {
	return &MockFollowsRepository_Unfollow_Call{Call: _e.mock.On("Unfollow", ctx, userID, followerID)}
}

func (_c *MockFollowsRepository_Unfollow_Call) Run(run func(ctx context.Context, userID int64, followerID int64)) *MockFollowsRepository_Unfollow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *MockFollowsRepository_Unfollow_Call) Return(_a0 error) *MockFollowsRepository_Unfollow_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFollowsRepository_Unfollow_Call) RunAndReturn(run func(context.Context, int64, int64) error) *MockFollowsRepository_Unfollow_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFollowsRepository creates a new instance of MockFollowsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFollowsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFollowsRepository {
	mock := &MockFollowsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
