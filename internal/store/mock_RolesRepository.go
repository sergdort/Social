// Code generated by mockery v2.53.3. DO NOT EDIT.

package store

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockRolesRepository is an autogenerated mock type for the RolesRepository type
type MockRolesRepository struct {
	mock.Mock
}

type MockRolesRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRolesRepository) EXPECT() *MockRolesRepository_Expecter {
	return &MockRolesRepository_Expecter{mock: &_m.Mock}
}

// GetByRoleType provides a mock function with given fields: ctx, name
func (_m *MockRolesRepository) GetByRoleType(ctx context.Context, name RoleType) (*Role, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetByRoleType")
	}

	var r0 *Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, RoleType) (*Role, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, RoleType) *Role); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Role)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, RoleType) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRolesRepository_GetByRoleType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByRoleType'
type MockRolesRepository_GetByRoleType_Call struct {
	*mock.Call
}

// GetByRoleType is a helper method to define mock.On call
//   - ctx context.Context
//   - name RoleType
func (_e *MockRolesRepository_Expecter) GetByRoleType(ctx interface{}, name interface{}) *MockRolesRepository_GetByRoleType_Call {
	return &MockRolesRepository_GetByRoleType_Call{Call: _e.mock.On("GetByRoleType", ctx, name)}
}

func (_c *MockRolesRepository_GetByRoleType_Call) Run(run func(ctx context.Context, name RoleType)) *MockRolesRepository_GetByRoleType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(RoleType))
	})
	return _c
}

func (_c *MockRolesRepository_GetByRoleType_Call) Return(_a0 *Role, _a1 error) *MockRolesRepository_GetByRoleType_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRolesRepository_GetByRoleType_Call) RunAndReturn(run func(context.Context, RoleType) (*Role, error)) *MockRolesRepository_GetByRoleType_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRolesRepository creates a new instance of MockRolesRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRolesRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRolesRepository {
	mock := &MockRolesRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
