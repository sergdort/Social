// Code generated by mockery v2.53.3. DO NOT EDIT.

package cache

import (
	context "context"

	store "github.com/sergdort/Social/internal/store"
	mock "github.com/stretchr/testify/mock"
)

// MockUsersCache is an autogenerated mock type for the UsersCache type
type MockUsersCache struct {
	mock.Mock
}

type MockUsersCache_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUsersCache) EXPECT() *MockUsersCache_Expecter {
	return &MockUsersCache_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: ctx, id
func (_m *MockUsersCache) Get(ctx context.Context, id int64) (*store.User, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *store.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*store.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *store.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*store.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUsersCache_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockUsersCache_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockUsersCache_Expecter) Get(ctx interface{}, id interface{}) *MockUsersCache_Get_Call {
	return &MockUsersCache_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *MockUsersCache_Get_Call) Run(run func(ctx context.Context, id int64)) *MockUsersCache_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockUsersCache_Get_Call) Return(_a0 *store.User, _a1 error) *MockUsersCache_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUsersCache_Get_Call) RunAndReturn(run func(context.Context, int64) (*store.User, error)) *MockUsersCache_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: ctx, user
func (_m *MockUsersCache) Set(ctx context.Context, user *store.User) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *store.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUsersCache_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockUsersCache_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - ctx context.Context
//   - user *store.User
func (_e *MockUsersCache_Expecter) Set(ctx interface{}, user interface{}) *MockUsersCache_Set_Call {
	return &MockUsersCache_Set_Call{Call: _e.mock.On("Set", ctx, user)}
}

func (_c *MockUsersCache_Set_Call) Run(run func(ctx context.Context, user *store.User)) *MockUsersCache_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*store.User))
	})
	return _c
}

func (_c *MockUsersCache_Set_Call) Return(_a0 error) *MockUsersCache_Set_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUsersCache_Set_Call) RunAndReturn(run func(context.Context, *store.User) error) *MockUsersCache_Set_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUsersCache creates a new instance of MockUsersCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUsersCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUsersCache {
	mock := &MockUsersCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
