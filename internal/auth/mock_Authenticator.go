// Code generated by mockery v2.53.3. DO NOT EDIT.

package auth

import (
	jwt "github.com/golang-jwt/jwt/v5"
	mock "github.com/stretchr/testify/mock"
)

// MockAuthenticator is an autogenerated mock type for the Authenticator type
type MockAuthenticator struct {
	mock.Mock
}

type MockAuthenticator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthenticator) EXPECT() *MockAuthenticator_Expecter {
	return &MockAuthenticator_Expecter{mock: &_m.Mock}
}

// GenerateToken provides a mock function with given fields: claims
func (_m *MockAuthenticator) GenerateToken(claims jwt.Claims) (string, error) {
	ret := _m.Called(claims)

	if len(ret) == 0 {
		panic("no return value specified for GenerateToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(jwt.Claims) (string, error)); ok {
		return rf(claims)
	}
	if rf, ok := ret.Get(0).(func(jwt.Claims) string); ok {
		r0 = rf(claims)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(jwt.Claims) error); ok {
		r1 = rf(claims)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthenticator_GenerateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateToken'
type MockAuthenticator_GenerateToken_Call struct {
	*mock.Call
}

// GenerateToken is a helper method to define mock.On call
//   - claims jwt.Claims
func (_e *MockAuthenticator_Expecter) GenerateToken(claims interface{}) *MockAuthenticator_GenerateToken_Call {
	return &MockAuthenticator_GenerateToken_Call{Call: _e.mock.On("GenerateToken", claims)}
}

func (_c *MockAuthenticator_GenerateToken_Call) Run(run func(claims jwt.Claims)) *MockAuthenticator_GenerateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(jwt.Claims))
	})
	return _c
}

func (_c *MockAuthenticator_GenerateToken_Call) Return(_a0 string, _a1 error) *MockAuthenticator_GenerateToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthenticator_GenerateToken_Call) RunAndReturn(run func(jwt.Claims) (string, error)) *MockAuthenticator_GenerateToken_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateToken provides a mock function with given fields: token
func (_m *MockAuthenticator) ValidateToken(token string) (*jwt.Token, error) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for ValidateToken")
	}

	var r0 *jwt.Token
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*jwt.Token, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) *jwt.Token); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jwt.Token)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthenticator_ValidateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateToken'
type MockAuthenticator_ValidateToken_Call struct {
	*mock.Call
}

// ValidateToken is a helper method to define mock.On call
//   - token string
func (_e *MockAuthenticator_Expecter) ValidateToken(token interface{}) *MockAuthenticator_ValidateToken_Call {
	return &MockAuthenticator_ValidateToken_Call{Call: _e.mock.On("ValidateToken", token)}
}

func (_c *MockAuthenticator_ValidateToken_Call) Run(run func(token string)) *MockAuthenticator_ValidateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockAuthenticator_ValidateToken_Call) Return(_a0 *jwt.Token, _a1 error) *MockAuthenticator_ValidateToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthenticator_ValidateToken_Call) RunAndReturn(run func(string) (*jwt.Token, error)) *MockAuthenticator_ValidateToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuthenticator creates a new instance of MockAuthenticator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthenticator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthenticator {
	mock := &MockAuthenticator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
