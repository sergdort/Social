basePath: /v1
definitions:
  authapp.TokenResponse:
    properties:
      token:
        example: JWT_TOKEN
        type: string
    required:
    - token
    type: object
  domain.Comment:
    properties:
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
      post_id:
        type: integer
      user:
        $ref: '#/definitions/domain.User'
      user_id:
        type: integer
    type: object
  domain.CreateUserTokenPayload:
    properties:
      email:
        maxLength: 255
        type: string
      password:
        maxLength: 72
        minLength: 3
        type: string
    required:
    - email
    - password
    type: object
  domain.Post:
    properties:
      comments:
        items:
          $ref: '#/definitions/domain.Comment'
        type: array
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
      tags:
        items:
          type: string
        type: array
      title:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/domain.User'
      user_id:
        type: integer
      version:
        type: integer
    type: object
  domain.Role:
    properties:
      description:
        type: string
      id:
        type: integer
      level:
        type: integer
      name:
        type: string
    type: object
  domain.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      role:
        $ref: '#/definitions/domain.Role'
      role_id:
        type: integer
      username:
        type: string
    type: object
  feedapp.FeedData:
    properties:
      data:
        items:
          $ref: '#/definitions/feedapp.PostFeedItem'
        type: array
    type: object
  feedapp.FeedUser:
    properties:
      id:
        example: 38
        type: integer
      username:
        example: GendryBaratheon
        type: string
    type: object
  feedapp.PostFeedItem:
    properties:
      comments_count:
        example: 4
        type: integer
      content:
        example: I will not become a queen of ashes.
        type: string
      created_at:
        example: 2025-03-19 10:08:25 +0000 UTC
        type: string
      id:
        example: 117
        type: integer
      tags:
        example:
        - Dothraki
        - Lannister
        - BattleOfBastards
        - KingsLanding
        items:
          type: string
        type: array
      title:
        example: The King of Ashes
        type: string
      updated_at:
        example: 2025-03-19 10:08:25 +0000 UTC
        type: string
      user:
        $ref: '#/definitions/feedapp.FeedUser'
      user_id:
        example: 38
        type: integer
    type: object
  main.UpdatePostPayload:
    properties:
      content:
        maxLength: 1000
        type: string
      title:
        maxLength: 100
        type: string
    type: object
  postsapp.CreatePostPayload:
    properties:
      content:
        maxLength: 1000
        type: string
      tags:
        items:
          type: string
        type: array
      title:
        maxLength: 100
        type: string
    required:
    - content
    - title
    type: object
  usersapp.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      role:
        type: string
      username:
        type: string
    type: object
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: API for Go Social.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Go Social
paths:
  /authentication/token:
    post:
      consumes:
      - application/json
      description: Creates a token for a user
      parameters:
      - description: User credentials
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/domain.CreateUserTokenPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/authapp.TokenResponse'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Creates a token
      tags:
      - authentication
  /health:
    get:
      description: Healthcheck endpoint
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
      summary: Healthcheck
      tags:
      - ops
  /posts/:
    post:
      consumes:
      - application/json
      description: Creates a post
      parameters:
      - description: Post Payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/postsapp.CreatePostPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.Post'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Creates a post
      tags:
      - posts
  /posts/{id}:
    delete:
      consumes:
      - application/json
      description: RevertCreateAndInvite a post by ID
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Deletes a post
      tags:
      - posts
    get:
      consumes:
      - application/json
      description: Fetches a post by ID
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Post'
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Fetches a post
      tags:
      - posts
    patch:
      consumes:
      - application/json
      description: Updates a post by ID
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      - description: Post payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.UpdatePostPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Post'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Updates a post
      tags:
      - posts
  /users/{id}:
    get:
      consumes:
      - application/json
      description: Fetches a user profile by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/usersapp.User'
        "204":
          description: No Content
          schema: {}
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Fetches a user profile
      tags:
      - users
  /users/{id}/follow:
    put:
      consumes:
      - application/json
      description: Follows a user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Follows a user
      tags:
      - users
  /users/feed:
    get:
      consumes:
      - application/json
      description: Fetches the user feed
      parameters:
      - description: Since
        in: query
        name: since
        type: string
      - description: Until
        in: query
        name: until
        type: string
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      - description: Sort
        in: query
        name: sort_by
        type: string
      - description: Tags
        in: query
        name: tags
        type: string
      - description: Search
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/feedapp.FeedData'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Fetches the user feed
      tags:
      - feed
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
